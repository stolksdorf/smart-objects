0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files (x86)\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files (x86)\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'publish' ]
2 info using npm@1.4.9
3 info using node@v0.10.28
4 verbose node symlink C:\Program Files (x86)\nodejs\\node.exe
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . C:\Users\scott.tolksdorf\AppData\Roaming\npm-cache\3a52ce78-.lock
11 verbose tar pack [ 'C:\\Users\\SCOTT~1.TOL\\AppData\\Local\\Temp\\npm-5876-rN9lN1NB\\1412018385927-0.9724593160208315\\tmp.tgz',
11 verbose tar pack   '.' ]
12 verbose tarball C:\Users\SCOTT~1.TOL\AppData\Local\Temp\npm-5876-rN9lN1NB\1412018385927-0.9724593160208315\tmp.tgz
13 verbose folder .
14 info prepublish smart-objects@0.1.0
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. C:\Users\scott.tolksdorf\AppData\Roaming\npm-cache\1f1177db-tar.lock
17 silly lockFile 43461eb7-85927-0-9724593160208315-tmp-tgz tar://C:\Users\SCOTT~1.TOL\AppData\Local\Temp\npm-5876-rN9lN1NB\1412018385927-0.9724593160208315\tmp.tgz
18 verbose lock tar://C:\Users\SCOTT~1.TOL\AppData\Local\Temp\npm-5876-rN9lN1NB\1412018385927-0.9724593160208315\tmp.tgz C:\Users\scott.tolksdorf\AppData\Roaming\npm-cache\43461eb7-85927-0-9724593160208315-tmp-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile 43461eb7-85927-0-9724593160208315-tmp-tgz tar://C:\Users\SCOTT~1.TOL\AppData\Local\Temp\npm-5876-rN9lN1NB\1412018385927-0.9724593160208315\tmp.tgz
22 silly lockFile 43461eb7-85927-0-9724593160208315-tmp-tgz tar://C:\Users\SCOTT~1.TOL\AppData\Local\Temp\npm-5876-rN9lN1NB\1412018385927-0.9724593160208315\tmp.tgz
23 verbose tar unpack C:\Users\SCOTT~1.TOL\AppData\Local\Temp\npm-5876-rN9lN1NB\1412018385927-0.9724593160208315\tmp.tgz
24 silly lockFile f3e2b7d4-ache-smart-objects-0-1-0-package tar://C:\Users\scott.tolksdorf\AppData\Roaming\npm-cache\smart-objects\0.1.0\package
25 verbose lock tar://C:\Users\scott.tolksdorf\AppData\Roaming\npm-cache\smart-objects\0.1.0\package C:\Users\scott.tolksdorf\AppData\Roaming\npm-cache\f3e2b7d4-ache-smart-objects-0-1-0-package.lock
26 silly lockFile 43461eb7-85927-0-9724593160208315-tmp-tgz tar://C:\Users\SCOTT~1.TOL\AppData\Local\Temp\npm-5876-rN9lN1NB\1412018385927-0.9724593160208315\tmp.tgz
27 verbose lock tar://C:\Users\SCOTT~1.TOL\AppData\Local\Temp\npm-5876-rN9lN1NB\1412018385927-0.9724593160208315\tmp.tgz C:\Users\scott.tolksdorf\AppData\Roaming\npm-cache\43461eb7-85927-0-9724593160208315-tmp-tgz.lock
28 silly gunzTarPerm modes [ '755', '644' ]
29 silly gunzTarPerm extractEntry package.json
30 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
31 silly gunzTarPerm extractEntry README.md
32 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
33 silly gunzTarPerm extractEntry smart-objects.js
34 silly gunzTarPerm modified mode [ 'smart-objects.js', 438, 420 ]
35 silly gunzTarPerm extractEntry test.html
36 silly gunzTarPerm modified mode [ 'test.html', 438, 420 ]
37 silly lockFile f3e2b7d4-ache-smart-objects-0-1-0-package tar://C:\Users\scott.tolksdorf\AppData\Roaming\npm-cache\smart-objects\0.1.0\package
38 silly lockFile f3e2b7d4-ache-smart-objects-0-1-0-package tar://C:\Users\scott.tolksdorf\AppData\Roaming\npm-cache\smart-objects\0.1.0\package
39 silly lockFile 43461eb7-85927-0-9724593160208315-tmp-tgz tar://C:\Users\SCOTT~1.TOL\AppData\Local\Temp\npm-5876-rN9lN1NB\1412018385927-0.9724593160208315\tmp.tgz
40 silly lockFile 43461eb7-85927-0-9724593160208315-tmp-tgz tar://C:\Users\SCOTT~1.TOL\AppData\Local\Temp\npm-5876-rN9lN1NB\1412018385927-0.9724593160208315\tmp.tgz
41 silly lockFile 3a52ce78- .
42 silly lockFile 3a52ce78- .
43 silly publish { name: 'smart-objects',
43 silly publish   version: '0.1.0',
43 silly publish   description: 'A library for creating event-y and validate-y objects in JS',
43 silly publish   main: 'smart-objects.js',
43 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
43 silly publish   repository:
43 silly publish    { type: 'git',
43 silly publish      url: 'git://github.com/stolksdorf/smart-objects.git' },
43 silly publish   keywords: [ 'validate', 'events', 'event', 'objects' ],
43 silly publish   author: { name: 'Scott Tolksdorf' },
43 silly publish   license: 'BSD-2-Clause',
43 silly publish   bugs: { url: 'https://github.com/stolksdorf/smart-objects/issues' },
43 silly publish   dependencies: { underscore: '^1.6.0' },
43 silly publish   readme: 'smart-objects\r\n=============\r\n\r\nSmarts Objects allow you to create a blueprint of properties for an object. These properties can then be validated and have events fired when these properties are modified. Heavy influenced by the [Ampersand State](http://ampersandjs.com/docs#ampersand-state) project. Smart Objects use [definable properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) so you don\'t have to bother with `.set()`, simple assignment will just work.\r\n\r\nIn short, use Smart Objects if:\r\n\r\n* You know exactly the structure of your object\r\n* Having default values on your object is useful\r\n* You want type checking on object properties\r\n* You have validation on object properties\r\n* You want to fire events whenever a property is modified\r\n* You want to add additional properties/functions on an object that aren\'t serialized\r\n\r\n### Creating a Smart-Object\r\n\r\nLet\'s create a simple user model\r\n\r\n\tvar UserModel = smartObj({\r\n\t\tprops : {\r\n\t\t\tname : \'string\',\r\n\t\t\tage : \'number\',\r\n\t\t\tposts : {\r\n\t\t\t\ttype : \'array\',\r\n\t\t\t\tvalidate : function(val){\r\n\t\t\t\t\treturn val.length > 0;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tcustomData : \'object\',\r\n\t\t\tuserType : {\r\n\t\t\t\ttier : \'string\',\r\n\t\t\t\tisAwesome : {\r\n\t\t\t\t\ttype : \'boolean\',\r\n\t\t\t\t\tdefault : false\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tcreated_on : {\r\n\t\t\t\ttype : \'number\',\r\n\t\t\t\tdefault : Date.now\r\n\t\t\t},\r\n\t\t\tadditionalData : \'any\'\r\n\t\t}\r\n\t});\r\n\r\n\r\nEach smart object should have a `props` object outlining the properties you care about, along with their type. On creation, those properties are defaulted to that type\'s default value. So in our example,`loggedInUser.posts` will actually be initialized as an empty array. You get and set these properties just as you would normally, no worrying about `.set()` or `.get()` functions.\r\n\r\n\tvar loggedInUser = UserModel.create({ name : \'Bromley\'});\r\n\r\n\tif(!loggedInUser.userType.isAwesome){\r\n\t\tloggedInUser.additionalData = \'Not cool bro\';\r\n\t}\r\n\r\n\r\n### Events\r\n\r\nSmart Objects fire change events whenever one of it\'s tracking properties is modified. `change` is always fired whenever anything changes. To listen to a specific property only, use the syntax `\'change:propName\'`.\r\n\r\n\tloggedInUser.on(\'change\', function(propName){\r\n\t\tconsole.log(propName + \'has changed!\');\r\n\t});\r\n\tloggedInUser.on(\'change:age\', function(newAge){\r\n\t\tconsole.log(\'why are you changing your age?\');\r\n\t});\r\n\tloggedInUser.age = 21; //Both events will fire\r\n\r\n\r\n### Type Checking\r\n\r\nProperty types are used for type checking whenever a property is set.\r\n\r\n\tloggedInUser.name = 23;\r\n\t//Type Error: Property \'name\' only supports string\r\n\r\nIf you aren\'t sure what type the property will be, but still want to listen to events on it, you can use the type of `\'any\'`.\r\n\r\n\tloggedInUser.additionalData = true;\r\n\tloggedInUser.additionalData = {powerLevel : 9001};\r\n\t//No errors here!\r\n\r\n\r\n### Default Values\r\n\r\nThe property type can also be as an object containing a `default` field. This field can be a function, which will be called at creation time.\r\n\r\n\tvar UserModel = smartObj({\r\n\t\tprops : {\r\n\t\t\tname : {\r\n\t\t\t\ttype : \'string\',\r\n\t\t\t\tdefault : \'New User\'\r\n\t\t\t},\r\n\t\t\tage : \'number\',\r\n\t\t\tposts : \'array\',\r\n\t\t\tcustomData : {\r\n\t\t\t\ttype : \'object\',\r\n\t\t\t\tdefault : {junk : true}\r\n\t\t\t},\r\n\t\t\tuserType : {\r\n\t\t\t\ttier : {\r\n\t\t\t\t\ttype : \'string\',\r\n\t\t\t\t\tdefault : \'bronze\'\r\n\t\t\t\t},\r\n\t\t\t\tisAwesome : {\r\n\t\t\t\t\ttype : \'boolean\',\r\n\t\t\t\t\tdefault : false\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\tadditionalData : {\r\n\t\t\t\ttype : \'any\',\r\n\t\t\t\tdefault : {}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tvar emptyUser = UserModel.create();\r\n\r\n\t//What you get\r\n\t{\r\n\t\tname : \'New User\',\r\n\t\tage : undefined,\r\n\t\tposts : [],\r\n\t\tcustomData : {junk : true},\r\n\t\tuserType : {\r\n\t\t\ttier : \'bronze\',\r\n\t\t\tisAwesome : false\r\n\t\t},\r\n\t\tadditionalData : {}\r\n\t}\r\n\r\n### Validation\r\n\r\nEach smart object will have access to a `.validate()` function which will either return `true` or an object mapped with error messages. Each prop can have it\'s own validation function defined on the definition object as `validate`. The value of the prop will be passed in as a parameter, and the function context will be the smart object itself. To mark a field as invalid, either return `false` or a custom error string.\r\n\r\n\tvar UserModel = smartObj({\r\n\t\tprops : {\r\n\t\t\tname : {\r\n\t\t\t\ttype : \'string\',\r\n\t\t\t\tvalidate : function(name){\r\n\t\t\t\t\treturn !!name\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tage : \'number\',\r\n\t\t\tposts : \'array\',\r\n\t\t\tcustomData : \'object\',\r\n\t\t\tuserType : {\r\n\t\t\t\ttier : \'string\',\r\n\t\t\t\tisAwesome : {\r\n\t\t\t\t\ttype : \'boolean\',\r\n\t\t\t\t\tdefault : false,\r\n\t\t\t\t\tvalidate : function(val){\r\n\t\t\t\t\t\tif(!val) return \'Must be Awesome\'\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tvar loggedInUser = UserModel.create({ name : \'Bromley\'});\r\n\r\n\tloggedInUser.validate();\r\n\t//Returns\r\n\t{\r\n\t\tname : \'Invalid\',\r\n\t\tuserType : {\r\n\t\t\tisAwesome : \'Must be Awesome\'\r\n\t\t}\r\n\t}\r\n\r\n\r\n### Methods\r\n\r\nWe can also define functions we want to be added to each smart object along with the `props`.\r\n\r\n\tvar UserModel = smartObj({\r\n\t\tprops : {\r\n\t\t\tname : \'string\',\r\n\t\t\tage : \'number\',\r\n\t\t\tposts : \'array\',\r\n\t\t\tcustomData : \'object\',\r\n\t\t\tuserType : {\r\n\t\t\t\ttier : \'string\',\r\n\t\t\t\tisAwesome : \'boolean\'\r\n\t\t\t}\r\n\t\t},\r\n\t\tmethods : {\r\n\t\t\thasManyPosts : function(){\r\n\t\t\t\treturn this.posts.length > 10;\r\n\t\t\t},\r\n\t\t\ttoggleAwesome : function(){\r\n\t\t\t\tthis.userType.isAwesome = !this.userType.isAwesome;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tvar loggedInUser = UserModel.create({ name : \'Bromley\'});\r\n\r\n\tloggedInUser.hasManyPosts(); //false\r\n\r\n### Statics\r\n\r\nStatic functions are added to the smart-object definition, but not the instance. This is useful for when you have a function that deals with your smart-objects, not a specific instance, or we want a function that will create many instances given criteria, such as `.fetchAllActiveUsers()`.\r\n\r\n\r\n\tvar UserModel = smartObj({\r\n\t\tprops : {\r\n\t\t\tname : \'string\',\r\n\t\t\tage : \'number\',\r\n\t\t\tposts : \'array\',\r\n\t\t\tcustomData : \'object\',\r\n\t\t\tuserType : {\r\n\t\t\t\ttier : \'string\',\r\n\t\t\t\tisAwesome : [\'boolean\', false]\r\n\t\t\t}\r\n\t\t},\r\n\t\tmethods : {\r\n\t\t\thasManyPosts : function(){\r\n\t\t\t\treturn this.posts.length > 10;\r\n\t\t\t},\r\n\t\t\ttoggleAwesome : function(){\r\n\t\t\t\tthis.userType.isAwesome = !this.userType.isAwesome;\r\n\t\t\t}\r\n\t\t},\r\n\t\tstatics : {\r\n\t\t\tgetRecentUsers : function(){\r\n\t\t\t\t//...\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\r\n### Built-in Goodies\r\n\r\nEach Smart Object comes with a few built-in goodies\r\n\r\n**set** &nbsp; `smart_obj.set([object])` <br>\r\nSet allows you to massively update your object\'s properties. Useful for initially defining a smart object with defaults and triggers waiting on response from an API, then setting that response to your object. This will do a validation check on each property as well.\r\n\r\n**toJSON** &nbsp; `smart_obj.toJSON()` <br>\r\nReturns a JSON version of your smart object without any of the getters, setters, or any additional properties you may have added. Perfect for shipping data off to an API.\r\n\r\n**_props** &nbsp; `smart_obj._props` <br>\r\nThe smart object\'s properties are actually stored at `_props`. If you want to be sneaky and change some values without firing change events or not have it validated, you can do it here.\r\n\r\n\tloggedInUser._props.age = 21;\r\n\tloggedInUser.age; //it\'s 21! and not a single event was fired.',
43 silly publish   readmeFilename: 'README.md',
43 silly publish   homepage: 'https://github.com/stolksdorf/smart-objects',
43 silly publish   _id: 'smart-objects@0.1.0',
43 silly publish   _shasum: 'f2987f7c4430a340e64dc88ae3b696d13cb6d0e9',
43 silly publish   _from: '.' }
44 verbose url raw smart-objects
45 verbose url resolving [ 'https://registry.npmjs.org/', './smart-objects' ]
46 verbose url resolved https://registry.npmjs.org/smart-objects
47 info trying registry request attempt 1 at 15:19:45
48 http PUT https://registry.npmjs.org/smart-objects
49 http 403 https://registry.npmjs.org/smart-objects
50 verbose headers { date: 'Mon, 29 Sep 2014 19:19:45 GMT',
50 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
50 verbose headers   'content-type': 'application/json',
50 verbose headers   'cache-control': 'max-age=60',
50 verbose headers   'content-length': '15041',
50 verbose headers   'accept-ranges': 'bytes',
50 verbose headers   via: '1.1 varnish',
50 verbose headers   'x-served-by': 'cache-jfk1027-JFK',
50 verbose headers   'x-cache': 'MISS',
50 verbose headers   'x-cache-hits': '0',
50 verbose headers   'x-timer': 'S1412018385.159827,VS0,VE185',
50 verbose headers   'keep-alive': 'timeout=10, max=50',
50 verbose headers   connection: 'Keep-Alive' }
51 error publish Failed PUT 403
52 error Error: forbidden cannot modify pre-existing version: 0.1.0
52 error old={"name":"smart-objects","version":"0.1.0","description":"A library for creating event-y and validate-y objects in JS","main":"smart-objects.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"git://github.com/stolksdorf/smart-objects.git"},"keywords":["validate","events","event","objects"],"author":{"name":"Scott Tolksdorf"},"license":"BSD-2-Clause","bugs":{"url":"https://github.com/stolksdorf/smart-objects/issues"},"dependencies":{"underscore":"~1.6.0"},"homepage":"https://github.com/stolksdorf/smart-objects","_id":"smart-objects@0.1.0","_shasum":"ce2d34f8eb0d2b74e9613f0a12465f4ed3bb9560","_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"stolksdorf","email":"scott.tolksdorf@gmail.com"},"maintainers":[{"name":"stolksdorf","email":"scott.tolksdorf@gmail.com"}],"dist":{"shasum":"ce2d34f8eb0d2b74e9613f0a12465f4ed3bb9560","tarball":"http://registry.npmjs.org/smart-objects/-/smart-objects-0.1.0.tgz"}}
52 error new={"name":"smart-objects","version":"0.1.0","description":"A library for creating event-y and validate-y objects in JS","main":"smart-objects.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"git://github.com/stolksdorf/smart-objects.git"},"keywords":["validate","events","event","objects"],"author":{"name":"Scott Tolksdorf"},"license":"BSD-2-Clause","bugs":{"url":"https://github.com/stolksdorf/smart-objects/issues"},"dependencies":{"underscore":"^1.6.0"},"readme":"smart-objects\u000d\u000a=============\u000d\u000a\u000d\u000aSmarts Objects allow you to create a blueprint of properties for an object. These properties can then be validated and have events fired when these properties are modified. Heavy influenced by the [Ampersand State](http://ampersandjs.com/docs#ampersand-state) project. Smart Objects use [definable properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty) so you don't have to bother with `.set()`, simple assignment will just work.\u000d\u000a\u000d\u000aIn short, use Smart Objects if:\u000d\u000a\u000d\u000a* You know exactly the structure of your object\u000d\u000a* Having default values on your object is useful\u000d\u000a* You want type checking on object properties\u000d\u000a* You have validation on object properties\u000d\u000a* You want to fire events whenever a property is modified\u000d\u000a* You want to add additional properties/functions on an object that aren't serialized\u000d\u000a\u000d\u000a### Creating a Smart-Object\u000d\u000a\u000d\u000aLet's create a simple user model\u000d\u000a\u000d\u000a\u0009var UserModel = smartObj({\u000d\u000a\u0009\u0009props : {\u000d\u000a\u0009\u0009\u0009name : 'string',\u000d\u000a\u0009\u0009\u0009age : 'number',\u000d\u000a\u0009\u0009\u0009posts : {\u000d\u000a\u0009\u0009\u0009\u0009type : 'array',\u000d\u000a\u0009\u0009\u0009\u0009validate : function(val){\u000d\u000a\u0009\u0009\u0009\u0009\u0009return val.length > 0;\u000d\u000a\u0009\u0009\u0009\u0009}\u000d\u000a\u0009\u0009\u0009},\u000d\u000a\u0009\u0009\u0009customData : 'object',\u000d\u000a\u0009\u0009\u0009userType : {\u000d\u000a\u0009\u0009\u0009\u0009tier : 'string',\u000d\u000a\u0009\u0009\u0009\u0009isAwesome : {\u000d\u000a\u0009\u0009\u0009\u0009\u0009type : 'boolean',\u000d\u000a\u0009\u0009\u0009\u0009\u0009default : false\u000d\u000a\u0009\u0009\u0009\u0009}\u000d\u000a\u0009\u0009\u0009},\u000d\u000a\u0009\u0009\u0009created_on : {\u000d\u000a\u0009\u0009\u0009\u0009type : 'number',\u000d\u000a\u0009\u0009\u0009\u0009default : Date.now\u000d\u000a\u0009\u0009\u0009},\u000d\u000a\u0009\u0009\u0009additionalData : 'any'\u000d\u000a\u0009\u0009}\u000d\u000a\u0009});\u000d\u000a\u000d\u000a\u000d\u000aEach smart object should have a `props` object outlining the properties you care about, along with their type. On creation, those properties are defaulted to that type's default value. So in our example,`loggedInUser.posts` will actually be initialized as an empty array. You get and set these properties just as you would normally, no worrying about `.set()` or `.get()` functions.\u000d\u000a\u000d\u000a\u0009var loggedInUser = UserModel.create({ name : 'Bromley'});\u000d\u000a\u000d\u000a\u0009if(!loggedInUser.userType.isAwesome){\u000d\u000a\u0009\u0009loggedInUser.additionalData = 'Not cool bro';\u000d\u000a\u0009}\u000d\u000a\u000d\u000a\u000d\u000a### Events\u000d\u000a\u000d\u000aSmart Objects fire change events whenever one of it's tracking properties is modified. `change` is always fired whenever anything changes. To listen to a specific property only, use the syntax `'change:propName'`.\u000d\u000a\u000d\u000a\u0009loggedInUser.on('change', function(propName){\u000d\u000a\u0009\u0009console.log(propName + 'has changed!');\u000d\u000a\u0009});\u000d\u000a\u0009loggedInUser.on('change:age', function(newAge){\u000d\u000a\u0009\u0009console.log('why are you changing your age?');\u000d\u000a\u0009});\u000d\u000a\u0009loggedInUser.age = 21; //Both events will fire\u000d\u000a\u000d\u000a\u000d\u000a### Type Checking\u000d\u000a\u000d\u000aProperty types are used for type checking whenever a property is set.\u000d\u000a\u000d\u000a\u0009loggedInUser.name = 23;\u000d\u000a\u0009//Type Error: Property 'name' only supports string\u000d\u000a\u000d\u000aIf you aren't sure what type the property will be, but still want to listen to events on it, you can use the type of `'any'`.\u000d\u000a\u000d\u000a\u0009loggedInUser.additionalData = true;\u000d\u000a\u0009loggedInUser.additionalData = {powerLevel : 9001};\u000d\u000a\u0009//No errors here!\u000d\u000a\u000d\u000a\u000d\u000a### Default Values\u000d\u000a\u000d\u000aThe property type can also be as an object containing a `default` field. This field can be a function, which will be called at creation time.\u000d\u000a\u000d\u000a\u0009var UserModel = smartObj({\u000d\u000a\u0009\u0009props : {\u000d\u000a\u0009\u0009\u0009name : {\u000d\u000a\u0009\u0009\u0009\u0009type : 'string',\u000d\u000a\u0009\u0009\u0009\u0009default : 'New User'\u000d\u000a\u0009\u0009\u0009},\u000d\u000a\u0009\u0009\u0009age : 'number',\u000d\u000a\u0009\u0009\u0009posts : 'array',\u000d\u000a\u0009\u0009\u0009customData : {\u000d\u000a\u0009\u0009\u0009\u0009type : 'object',\u000d\u000a\u0009\u0009\u0009\u0009default : {junk : true}\u000d\u000a\u0009\u0009\u0009},\u000d\u000a\u0009\u0009\u0009userType : {\u000d\u000a\u0009\u0009\u0009\u0009tier : {\u000d\u000a\u0009\u0009\u0009\u0009\u0009type : 'string',\u000d\u000a\u0009\u0009\u0009\u0009\u0009default : 'bronze'\u000d\u000a\u0009\u0009\u0009\u0009},\u000d\u000a\u0009\u0009\u0009\u0009isAwesome : {\u000d\u000a\u0009\u0009\u0009\u0009\u0009type : 'boolean',\u000d\u000a\u0009\u0009\u0009\u0009\u0009default : false\u000d\u000a\u0009\u0009\u0009\u0009},\u000d\u000a\u0009\u0009\u0009},\u000d\u000a\u0009\u0009\u0009additionalData : {\u000d\u000a\u0009\u0009\u0009\u0009type : 'any',\u000d\u000a\u0009\u0009\u0009\u0009default : {}\u000d\u000a\u0009\u0009\u0009}\u000d\u000a\u0009\u0009}\u000d\u000a\u0009});\u000d\u000a\u000d\u000a\u0009var emptyUser = UserModel.create();\u000d\u000a\u000d\u000a\u0009//What you get\u000d\u000a\u0009{\u000d\u000a\u0009\u0009name : 'New User',\u000d\u000a\u0009\u0009age : undefined,\u000d\u000a\u0009\u0009posts : [],\u000d\u000a\u0009\u0009customData : {junk : true},\u000d\u000a\u0009\u0009userType : {\u000d\u000a\u0009\u0009\u0009tier : 'bronze',\u000d\u000a\u0009\u0009\u0009isAwesome : false\u000d\u000a\u0009\u0009},\u000d\u000a\u0009\u0009additionalData : {}\u000d\u000a\u0009}\u000d\u000a\u000d\u000a### Validation\u000d\u000a\u000d\u000aEach smart object will have access to a `.validate()` function which will either return `true` or an object mapped with error messages. Each prop can have it's own validation function defined on the definition object as `validate`. The value of the prop will be passed in as a parameter, and the function context will be the smart object itself. To mark a field as invalid, either return `false` or a custom error string.\u000d\u000a\u000d\u000a\u0009var UserModel = smartObj({\u000d\u000a\u0009\u0009props : {\u000d\u000a\u0009\u0009\u0009name : {\u000d\u000a\u0009\u0009\u0009\u0009type : 'string',\u000d\u000a\u0009\u0009\u0009\u0009validate : function(name){\u000d\u000a\u0009\u0009\u0009\u0009\u0009return !!name\u000d\u000a\u0009\u0009\u0009\u0009}\u000d\u000a\u0009\u0009\u0009},\u000d\u000a\u0009\u0009\u0009age : 'number',\u000d\u000a\u0009\u0009\u0009posts : 'array',\u000d\u000a\u0009\u0009\u0009customData : 'object',\u000d\u000a\u0009\u0009\u0009userType : {\u000d\u000a\u0009\u0009\u0009\u0009tier : 'string',\u000d\u000a\u0009\u0009\u0009\u0009isAwesome : {\u000d\u000a\u0009\u0009\u0009\u0009\u0009type : 'boolean',\u000d\u000a\u0009\u0009\u0009\u0009\u0009default : false,\u000d\u000a\u0009\u0009\u0009\u0009\u0009validate : function(val){\u000d\u000a\u0009\u0009\u0009\u0009\u0009\u0009if(!val) return 'Must be Awesome'\u000d\u000a\u0009\u0009\u0009\u0009\u0009}\u000d\u000a\u0009\u0009\u0009}\u000d\u000a\u0009\u0009}\u000d\u000a\u0009});\u000d\u000a\u000d\u000a\u0009var loggedInUser = UserModel.create({ name : 'Bromley'});\u000d\u000a\u000d\u000a\u0009loggedInUser.validate();\u000d\u000a\u0009//Returns\u000d\u000a\u0009{\u000d\u000a\u0009\u0009name : 'Invalid',\u000d\u000a\u0009\u0009userType : {\u000d\u000a\u0009\u0009\u0009isAwesome : 'Must be Awesome'\u000d\u000a\u0009\u0009}\u000d\u000a\u0009}\u000d\u000a\u000d\u000a\u000d\u000a### Methods\u000d\u000a\u000d\u000aWe can also define functions we want to be added to each smart object along with the `props`.\u000d\u000a\u000d\u000a\u0009var UserModel = smartObj({\u000d\u000a\u0009\u0009props : {\u000d\u000a\u0009\u0009\u0009name : 'string',\u000d\u000a\u0009\u0009\u0009age : 'number',\u000d\u000a\u0009\u0009\u0009posts : 'array',\u000d\u000a\u0009\u0009\u0009customData : 'object',\u000d\u000a\u0009\u0009\u0009userType : {\u000d\u000a\u0009\u0009\u0009\u0009tier : 'string',\u000d\u000a\u0009\u0009\u0009\u0009isAwesome : 'boolean'\u000d\u000a\u0009\u0009\u0009}\u000d\u000a\u0009\u0009},\u000d\u000a\u0009\u0009methods : {\u000d\u000a\u0009\u0009\u0009hasManyPosts : function(){\u000d\u000a\u0009\u0009\u0009\u0009return this.posts.length > 10;\u000d\u000a\u0009\u0009\u0009},\u000d\u000a\u0009\u0009\u0009toggleAwesome : function(){\u000d\u000a\u0009\u0009\u0009\u0009this.userType.isAwesome = !this.userType.isAwesome;\u000d\u000a\u0009\u0009\u0009}\u000d\u000a\u0009\u0009}\u000d\u000a\u0009});\u000d\u000a\u000d\u000a\u0009var loggedInUser = UserModel.create({ name : 'Bromley'});\u000d\u000a\u000d\u000a\u0009loggedInUser.hasManyPosts(); //false\u000d\u000a\u000d\u000a### Statics\u000d\u000a\u000d\u000aStatic functions are added to the smart-object definition, but not the instance. This is useful for when you have a function that deals with your smart-objects, not a specific instance, or we want a function that will create many instances given criteria, such as `.fetchAllActiveUsers()`.\u000d\u000a\u000d\u000a\u000d\u000a\u0009var UserModel = smartObj({\u000d\u000a\u0009\u0009props : {\u000d\u000a\u0009\u0009\u0009name : 'string',\u000d\u000a\u0009\u0009\u0009age : 'number',\u000d\u000a\u0009\u0009\u0009posts : 'array',\u000d\u000a\u0009\u0009\u0009customData : 'object',\u000d\u000a\u0009\u0009\u0009userType : {\u000d\u000a\u0009\u0009\u0009\u0009tier : 'string',\u000d\u000a\u0009\u0009\u0009\u0009isAwesome : ['boolean', false]\u000d\u000a\u0009\u0009\u0009}\u000d\u000a\u0009\u0009},\u000d\u000a\u0009\u0009methods : {\u000d\u000a\u0009\u0009\u0009hasManyPosts : function(){\u000d\u000a\u0009\u0009\u0009\u0009return this.posts.length > 10;\u000d\u000a\u0009\u0009\u0009},\u000d\u000a\u0009\u0009\u0009toggleAwesome : function(){\u000d\u000a\u0009\u0009\u0009\u0009this.userType.isAwesome = !this.userType.isAwesome;\u000d\u000a\u0009\u0009\u0009}\u000d\u000a\u0009\u0009},\u000d\u000a\u0009\u0009statics : {\u000d\u000a\u0009\u0009\u0009getRecentUsers : function(){\u000d\u000a\u0009\u0009\u0009\u0009//...\u000d\u000a\u0009\u0009\u0009}\u000d\u000a\u0009\u0009}\u000d\u000a\u0009});\u000d\u000a\u000d\u000a\u000d\u000a### Built-in Goodies\u000d\u000a\u000d\u000aEach Smart Object comes with a few built-in goodies\u000d\u000a\u000d\u000a**set** &nbsp; `smart_obj.set([object])` <br>\u000d\u000aSet allows you to massively update your object's properties. Useful for initially defining a smart object with defaults and triggers waiting on response from an API, then setting that response to your object. This will do a validation check on each property as well.\u000d\u000a\u000d\u000a**toJSON** &nbsp; `smart_obj.toJSON()` <br>\u000d\u000aReturns a JSON version of your smart object without any of the getters, setters, or any additional properties you may have added. Perfect for shipping data off to an API.\u000d\u000a\u000d\u000a**_props** &nbsp; `smart_obj._props` <br>\u000d\u000aThe smart object's properties are actually stored at `_props`. If you want to be sneaky and change some values without firing change events or not have it validated, you can do it here.\u000d\u000a\u000d\u000a\u0009loggedInUser._props.age = 21;\u000d\u000a\u0009loggedInUser.age; //it's 21! and not a single event was fired.","readmeFilename":"README.md","homepage":"https://github.com/stolksdorf/smart-objects","_id":"smart-objects@0.1.0","_shasum":"f2987f7c4430a340e64dc88ae3b696d13cb6d0e9","_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"stolksdorf","email":"scott.tolksdorf@gmail.com"},"maintainers":[{"name":"stolksdorf","email":"scott.tolksdorf@gmail.com"}],"dist":{"shasum":"f2987f7c4430a340e64dc88ae3b696d13cb6d0e9","tarball":"http://registry.npmjs.org/smart-objects/-/smart-objects-0.1.0.tgz"}}: smart-objects
52 error     at RegClient.<anonymous> (C:\Program Files (x86)\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:273:14)
52 error     at Request._callback (C:\Program Files (x86)\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:211:65)
52 error     at Request.self.callback (C:\Program Files (x86)\nodejs\node_modules\npm\node_modules\request\request.js:123:22)
52 error     at Request.EventEmitter.emit (events.js:98:17)
52 error     at Request.<anonymous> (C:\Program Files (x86)\nodejs\node_modules\npm\node_modules\request\request.js:893:14)
52 error     at Request.EventEmitter.emit (events.js:117:20)
52 error     at IncomingMessage.<anonymous> (C:\Program Files (x86)\nodejs\node_modules\npm\node_modules\request\request.js:844:12)
52 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
52 error     at _stream_readable.js:919:16
52 error     at process._tickCallback (node.js:419:13)
53 error If you need help, you may report this *entire* log,
53 error including the npm and node versions, at:
53 error     <http://github.com/npm/npm/issues>
54 error System Windows_NT 6.2.9200
55 error command "C:\\Program Files (x86)\\nodejs\\\\node.exe" "C:\\Program Files (x86)\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "publish"
56 error cwd C:\Dropbox\root\Programming\Javascript\smart-objects
57 error node -v v0.10.28
58 error npm -v 1.4.9
59 verbose exit [ 1, true ]
